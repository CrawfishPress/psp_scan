"""
Test output of psp_scan(), verify that it generates valid .BMP and .PNG files
Note - the good-bmp/png files, were generated by psp_scan(), and visually confirmed to be good.
I wanted to use PaintShop Pro itself, to generate the files for comparison, but sadly, my
Alpha-compositing algorithm does not exactly match that used by PSP, so some bits are off by one,
(either high/low) in the generated bmp/pngs.
"""

import unittest

from src.__main__ import *

file_vals = {'00_multi_colors': {'image_width': 64, 'image_height': 64, 'total_image_size': 12288, 'layer_count': 1},
             '01_quadrants': {'image_width': 64, 'image_height': 64, 'total_image_size': 49152, 'layer_count': 4},
             '02_layered': {'image_width': 256, 'image_height': 256, 'total_image_size': 1376256, 'layer_count': 7},
             '03_ship': {'image_width': 256, 'image_height': 256, 'total_image_size': 1572864, 'layer_count': 8},
             '04_hex_mask': {'image_width': 256, 'image_height': 256, 'total_image_size': 1769472, 'layer_count': 9},
             '05_fubar_red': {'image_width': 1024, 'image_height': 1024, 'total_image_size': 3145728, 'layer_count': 1},
             '06_game_hex': {'image_width': 124, 'image_height': 107, 'total_image_size': 79608, 'layer_count': 2},
             }

comp_file = '10_rle_comp.pspimage'
bad_version_file = '11_version_six.pspimage'

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
BMP_DIR = os.path.join(BASE_DIR, 'bmps')


def cmp_files(first, second):
    first_fp = open(first, 'rb')
    second_fp = open(second, 'rb')
    first_data = first_fp.read()
    first_len = first_fp.tell()
    second_data = second_fp.read()
    second_len = second_fp.tell()
    first_fp.close()
    second_fp.close()

    mismatches = [(x, first_data[x], second_data[x]) for x in range(first_len) if first_data[x] != second_data[x]]

    return first_len, second_len, mismatches


class PSP_Tester(unittest.TestCase):
    def test_bits_to_value(self):
        """ Read in a file, see if it has some basic numbers correct. """

        for f_key, val in file_vals.items():
            in_file = os.path.join(BMP_DIR, f_key) + '.pspimage'
            p = PSPImage(in_file)

            img_block = p.get_block(blks.PSP_IMAGE_BLOCK)
            for field_name, field_val in val.items():
                test_val = img_block.info_chunk[field_name]
                self.assertEqual(field_val, test_val)

    def test_saved_files(self):
        """ Read in files, convert to .BMP and .PNG, check they match existing good files. """

        for f_key in file_vals.keys():
            in_file = os.path.join(BMP_DIR, f_key) + '.pspimage'
            out_bmp = os.path.join(BMP_DIR, f_key) + '_out.bmp'
            out_png = os.path.join(BMP_DIR, f_key) + '_out.png'
            good_bmp = os.path.join(BMP_DIR, f_key) + '_good.bmp'
            good_png = os.path.join(BMP_DIR, f_key) + '_good.png'

            p = PSPImage(in_file)
            p.save_as_bitmap(out_bmp)
            p.save_as_PNG(out_png)
            good_len, out_len, mismatches = cmp_files(good_bmp, out_bmp)
            self.assertEqual(good_len, out_len)
            self.assertListEqual([], mismatches)
            good_len, out_len, mismatches = cmp_files(good_png, out_png)
            self.assertEqual(good_len, out_len)
            self.assertListEqual([], mismatches)
            os.remove(out_bmp)
            os.remove(out_png)

    def test_psp_file_validation(self):
        """ Code should only read in PSP files - check that it bombs on non-PSP files. """

        test_file = os.path.join(BMP_DIR, file_vals.keys()[0] + '_good.bmp')
        with open(test_file, 'rb') as fp:
            self.assertRaises(TypeError, lambda: PSPImage(fp))

    def test_compression_validation(self):
        """ Currently only uncompressed files are supported. """

        test_file = os.path.join(BMP_DIR, comp_file)
        with open(test_file, 'rb') as fp:
            self.assertRaises(SyntaxError, lambda: PSPImage(fp))

    def test_version_validation(self):
        """ Currently only Version 8.0 files are supported. """

        test_file = os.path.join(BMP_DIR, bad_version_file)
        with open(test_file, 'rb') as fp:
            self.assertRaises(ValueError, lambda: PSPImage(fp))
